[Function(header=FunctionHeaderFull(name='sumIntegers',
                                    sections=[Section(type=<PrimitiveType.Integer: 'int'>,
                                                      parameters=['a']),
                                              Section(type=<PrimitiveType.Integer: 'int'>,
                                                      parameters=['b'])],
                                    return_type=<PrimitiveType.Integer: 'int'>),
          body=[DeclarationStatement(type=<PrimitiveType.Char: 'char'>,
                                     var_declarations=[VarDeclaration(name='c',
                                                                      expression=None)]),
                AssignmentStatement(left='c', right=Const(value="'A'")),
                DeclarationStatement(type=ArrayType(type=<PrimitiveType.Integer: 'int'>),
                                     var_declarations=[VarDeclaration(name='A',
                                                                      expression=ArrayAllocation(type=<PrimitiveType.Integer: 'int'>,
                                                                                                 size='5')),
                                                       VarDeclaration(name='B',
                                                                      expression=ArrayAllocation(type=<PrimitiveType.Integer: 'int'>,
                                                                                                 size='10'))]),
                DeclarationStatement(type=<PrimitiveType.Integer: 'int'>,
                                     var_declarations=[VarDeclaration(name='x',
                                                                      expression=None),
                                                       VarDeclaration(name='y',
                                                                      expression=ArrayCall(array=ExtendedVar(value='B'),
                                                                                           ref=Const(value='3'))),
                                                       VarDeclaration(name='z',
                                                                      expression=ExtendedVar(value='y'))]),
                AssignmentStatement(left='y',
                                    right=BinOperatorExpression(left=ExtendedVar(value='y'),
                                                                operator='%',
                                                                right=Const(value='10'))),
                AssignmentStatement(left='x',
                                    right=BinOperatorExpression(left=BinOperatorExpression(left=ExtendedVar(value='a'),
                                                                                           operator='*',
                                                                                           right=Const(value='2')),
                                                                operator='+',
                                                                right=BinOperatorExpression(left=Const(value='10'),
                                                                                            operator='/',
                                                                                            right=Const(value='5')))),
                IfStatement(condition=BinOperatorExpression(left=ExtendedVar(value='a'),
                                                            operator='<',
                                                            right=ExtendedVar(value='b')),
                            statements=[AssignmentStatement(left='a',
                                                            right=BinOperatorExpression(left=ExtendedVar(value='a'),
                                                                                        operator='+',
                                                                                        right=Const(value='1')))],
                            elseblocks=[ElseBlock(condition=None,
                                                  statements=[AssignmentStatement(left='b',
                                                                                  right=BinOperatorExpression(left=ExtendedVar(value='b'),
                                                                                                              operator='+',
                                                                                                              right=Const(value='1')))])]),
                IfStatement(condition=BinOperatorExpression(left=ExtendedVar(value='a'),
                                                            operator='<',
                                                            right=ExtendedVar(value='b')),
                            statements=[AssignmentStatement(left='a',
                                                            right=BinOperatorExpression(left=ExtendedVar(value='a'),
                                                                                        operator='+',
                                                                                        right=Const(value='1')))],
                            elseblocks=[ElseBlock(condition=BinOperatorExpression(left=ExtendedVar(value='a'),
                                                                                  operator='==',
                                                                                  right=BinOperatorExpression(left=ExtendedVar(value='b'),
                                                                                                              operator='+',
                                                                                                              right=Const(value='1'))),
                                                  statements=[AssignmentStatement(left='b',
                                                                                  right=BinOperatorExpression(left=ExtendedVar(value='b'),
                                                                                                              operator='+',
                                                                                                              right=Const(value='1')))]),
                                        ElseBlock(condition=BinOperatorExpression(left=ExtendedVar(value='a'),
                                                                                  operator='>',
                                                                                  right=BinOperatorExpression(left=ExtendedVar(value='b'),
                                                                                                              operator='+',
                                                                                                              right=Const(value='1'))),
                                                  statements=[AssignmentStatement(left='a',
                                                                                  right=BinOperatorExpression(left=ExtendedVar(value='a'),
                                                                                                              operator='*',
                                                                                                              right=Const(value='10')))]),
                                        ElseBlock(condition=None,
                                                  statements=[AssignmentStatement(left='b',
                                                                                  right=BinOperatorExpression(left=ExtendedVar(value='b'),
                                                                                                              operator='*',
                                                                                                              right=Const(value='10')))])])]),
 Procedure(header=ProcedureHeaderFull(name='example',
                                      sections=[Section(type=ArrayType(type=<PrimitiveType.Integer: 'int'>),
                                                        parameters=['a'])]),
           body=[ForDoStatement(head=ForCycleHead(var_declaration=ForDoVarDeclaration(name='letter',
                                                                                      value="'A'",
                                                                                      type=<PrimitiveType.Char: 'char'>),
                                                  to=Const(value="'Z'"),
                                                  step=None),
                                statements=[FunctionCallStatement(name='print',
                                                                  args=[ExtendedVar(value='letter')])])]),
 Function(header=FunctionHeaderFull(name='SumVectors',
                                    sections=[Section(type=ArrayType(type=<PrimitiveType.Integer: 'int'>),
                                                      parameters=['A', 'B'])],
                                    return_type=ArrayType(type=<PrimitiveType.Integer: 'int'>)),
          body=[DeclarationStatement(type=<PrimitiveType.Integer: 'int'>,
                                     var_declarations=[VarDeclaration(name='size',
                                                                      expression=FunctionCallStatement(name='length',
                                                                                                       args=[ExtendedVar(value='A')]))]),
                WarningStatement(expr=BinOperatorExpression(left=ExtendedVar(value='size'),
                                                            operator='==',
                                                            right=FunctionCallStatement(name='length',
                                                                                        args=[ExtendedVar(value='B')]))),
                DeclarationStatement(type=ArrayType(type=<PrimitiveType.Integer: 'int'>),
                                     var_declarations=[VarDeclaration(name='C',
                                                                      expression=ArrayAllocation(type=<PrimitiveType.Integer: 'int'>,
                                                                                                 size='size'))]),
                ForDoStatement(head=ForCycleHead(var_declaration=ForDoVarDeclaration(name='i',
                                                                                     value='0',
                                                                                     type=<PrimitiveType.Integer: 'int'>),
                                                 to=BinOperatorExpression(left=ExtendedVar(value='size'),
                                                                          operator='-',
                                                                          right=Const(value='1')),
                                                 step=None),
                               statements=[AssignmentStatement(left=ArrayCall(array=ExtendedVar(value='C'),
                                                                              ref=ExtendedVar(value='i')),
                                                               right=BinOperatorExpression(left=ArrayCall(array=ExtendedVar(value='A'),
                                                                                                          ref=ExtendedVar(value='i')),
                                                                                           operator='+',
                                                                                           right=ArrayCall(array=ExtendedVar(value='B'),
                                                                                                           ref=ExtendedVar(value='i'))))]),
                AssignmentStatement(left='SumVectors',
                                    right=ExtendedVar(value='C'))]),
 Procedure(header=ProcedureHeaderFull(name='example4',
                                      sections=[Section(type=<PrimitiveType.Char: 'char'>,
                                                        parameters=['a'])]),
           body=[DeclarationStatement(type=ArrayType(type=<PrimitiveType.Char: 'char'>),
                                      var_declarations=[VarDeclaration(name='string',
                                                                       expression=Const(value='"We '
                                                                                              'say '
                                                                                              '\\"Hello, '
                                                                                              'World!\\"\\n"'))])])]
